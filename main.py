import requests
import random
import string
import time
from bs4 import BeautifulSoup
from fp.fp import FreeProxy
from stem import Signal
from stem.control import Controller

# рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рд╕реЗрдЯрд┐рдВрдЧреНрд╕
TARGET_URL = "https://your-website.com/register"  # рдЕрдкрдирд╛ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди URL рдбрд╛рд▓реЗрдВ
ATTEMPTS = 10  # рдХрд┐рддрдиреЗ рдЕрдЯреЗрдореНрдкреНрдЯ рдХрд░рдиреЗ рд╣реИрдВ
TOR_MODE = True  # рдЯреЙрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ (рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЯреЙрд░ рдЗрдВрд╕реНрдЯреЙрд▓ рд╣реИ)
PROXY_MODE = False  # рдлреНрд░реА рдкреНрд░реЙрдХреНрд╕реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
DELAY_BETWEEN_ATTEMPTS = 3  # рд╕реЗрдХрдВрдб рдореЗрдВ

# рдпреВрдЬрд░-рдПрдЬреЗрдВрдЯ рд▓рд┐рд╕реНрдЯ
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Safari/605.1.15",
    "Mozilla/5.0 (X11; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.59"
]

def generate_random_email():
    """рд░реИрдВрдбрдо рдИрдореЗрд▓ рдЬрдирд░реЗрдЯ рдХрд░реЗрдВ"""
    domains = ["gmail.com", "yahoo.com", "hotmail.com", "outlook.com", "example.com"]
    username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=random.randint(6, 12)))
    domain = random.choice(domains)
    return f"{username}@{domain}"

def generate_random_password(length=12):
    """рд░реИрдВрдбрдо рдкрд╛рд╕рд╡рд░реНрдб рдЬрдирд░реЗрдЯ рдХрд░реЗрдВ"""
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(length))

def get_random_user_agent():
    """рд░реИрдВрдбрдо рдпреВрдЬрд░-рдПрдЬреЗрдВрдЯ рдЪреБрдиреЗрдВ"""
    return random.choice(USER_AGENTS)

def get_tor_session():
    """рдЯреЙрд░ рдХреЗ рд▓рд┐рдП рдирдпрд╛ рд╕реЗрд╢рди рдмрдирд╛рдПрдВ"""
    session = requests.Session()
    session.proxies = {'http': 'socks5h://localhost:9050', 'https': 'socks5h://localhost:9050'}
    return session

def renew_tor_connection():
    """рдЯреЙрд░ IP рдПрдбреНрд░реЗрд╕ рдмрджрд▓реЗрдВ"""
    with Controller.from_port(port=9051) as controller:
        controller.authenticate(password="your_tor_password")  # рдЕрдкрдирд╛ рдЯреЙрд░ рдкрд╛рд╕рд╡рд░реНрдб рд╕реЗрдЯ рдХрд░реЗрдВ
        controller.signal(Signal.NEWNYM)

def get_fresh_proxy():
    """рдирдпрд╛ рдкреНрд░реЙрдХреНрд╕реА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ"""
    proxy = FreeProxy(rand=True, timeout=1).get()
    return {"http": proxy, "https": proxy}

def get_device_fingerprint():
    """рд░реИрдВрдбрдо рдбрд┐рд╡рд╛рдЗрд╕ рдлрд┐рдВрдЧрд░рдкреНрд░рд┐рдВрдЯ рдЬрдирд░реЗрдЯ рдХрд░реЗрдВ"""
    return {
        "screen_res": f"{random.randint(800, 3840)}x{random.randint(600, 2160)}",
        "timezone": random.choice(["GMT-5", "GMT+1", "GMT+5.5", "GMT+8", "GMT-8"]),
        "plugins": random.sample(["Chrome PDF Viewer", "Widevine Content Decryption Module", "Native Client"], random.randint(0, 3)),
        "platform": random.choice(["Win32", "Linux x86_64", "MacIntel"])
    }

def extract_csrf_token(html_content):
    """HTML рд╕реЗ CSRF рдЯреЛрдХрди рдирд┐рдХрд╛рд▓реЗрдВ"""
    soup = BeautifulSoup(html_content, 'html.parser')
    token = None
    
    # рд╕рд╛рдорд╛рдиреНрдп CSRF рдЯреЛрдХрди рдирд╛рдореЛрдВ рдХреЗ рд▓рд┐рдП рдЪреЗрдХ рдХрд░реЗрдВ
    for name in ["csrf_token", "csrfmiddlewaretoken", "authenticity_token", "_token"]:
        token_element = soup.find(attrs={"name": name})
        if token_element and token_element.get("value"):
            token = token_element["value"]
            break
    
    return token

def attempt_registration(session, headers, fingerprint):
    """рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдЕрдЯреЗрдореНрдкреНрдЯ рдХрд░реЗрдВ"""
    try:
        # рдкрд╣рд▓реЗ рдкреЗрдЬ рд╕реЗ CSRF рдЯреЛрдХрди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
        response = session.get(TARGET_URL, headers=headers, timeout=10)
        csrf_token = extract_csrf_token(response.text)
        
        if not csrf_token:
            print("CSRF рдЯреЛрдХрди рдирд╣реАрдВ рдорд┐рд▓рд╛. рд╕реБрд░рдХреНрд╖рд╛ рдХрдордЬреЛрд░ рд╣реЛ рд╕рдХрддреА рд╣реИ")
        
        # рдлреЙрд░реНрдо рдбреЗрдЯрд╛ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
        form_data = {
            "email": generate_random_email(),
            "password": generate_random_password(),
            "confirm_password": generate_random_password(),
            "username": ''.join(random.choices(string.ascii_lowercase, k=8)),
            "csrf_token": csrf_token,
            "fingerprint": str(fingerprint)
        }
        
        # рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬреЗрдВ
        response = session.post(TARGET_URL, data=form_data, headers=headers, timeout=15)
        
        # рд╕рдлрд▓рддрд╛ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ
        if response.status_code == 200:
            if "success" in response.text.lower() or "welcome" in response.text.lower():
                return True
        return False
        
    except Exception as e:
        print(f"рддреНрд░реБрдЯрд┐: {str(e)}")
        return False

def run_security_test():
    """рд╕реБрд░рдХреНрд╖рд╛ рдкрд░реАрдХреНрд╖рдг рдЪрд▓рд╛рдПрдВ"""
    successful_registrations = 0
    
    for attempt in range(1, ATTEMPTS + 1):
        print(f"\nрдЕрдЯреЗрдореНрдкреНрдЯ #{attempt}/{ATTEMPTS}")
        
        # рд╣реЗрдбрд░реНрд╕ рдФрд░ рдлрд┐рдВрдЧрд░рдкреНрд░рд┐рдВрдЯ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
        headers = {
            "User-Agent": get_random_user_agent(),
            "Accept-Language": random.choice(["en-US,en;q=0.9", "hi-IN;q=0.8", "mr-IN;q=0.7"]),
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
        }
        fingerprint = get_device_fingerprint()
        
        # рд╕рддреНрд░ рд╕реЗрдЯрдЕрдк
        session = requests.Session()
        
        # IP рд░реЛрдЯреЗрд╢рди
        if TOR_MODE:
            session = get_tor_session()
            renew_tor_connection()
            print("рдирдпрд╛ рдЯреЙрд░ IP рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣рд╛ рд╣реИ")
        elif PROXY_MODE:
            session.proxies = get_fresh_proxy()
            print("рдирдпрд╛ рдкреНрд░реЙрдХреНрд╕реА рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣рд╛ рд╣реИ")
        
        # рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдЕрдЯреЗрдореНрдкреНрдЯ
        success = attempt_registration(session, headers, fingerprint)
        
        if success:
            successful_registrations += 1
            print("рд╕рдлрд▓рддрд╛: рдЦрд╛рддрд╛ рдмрдирд╛рдпрд╛ рдЧрдпрд╛! рд╕реБрд░рдХреНрд╖рд╛ рдХрдордЬреЛрд░ рд╣реИ")
        else:
            print("рд╡рд┐рдлрд▓рддрд╛: рдЦрд╛рддрд╛ рдирд╣реАрдВ рдмрдирд╛рдпрд╛ рдЬрд╛ рд╕рдХрд╛")
        
        time.sleep(DELAY_BETWEEN_ATTEMPTS)
    
    # рдкрд░рд┐рдгрд╛рдо рд░рд┐рдкреЛрд░реНрдЯ
    print("\n" + "="*50)
    print(f"рдХреБрд▓ рд╕рдлрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди: {successful_registrations}/{ATTEMPTS}")
    print("="*50)
    
    if successful_registrations > 0:
        print("\n[рд╕реБрд░рдХреНрд╖рд╛ рдЪреЗрддрд╛рд╡рдиреА] рдЖрдкрдХреА рд╕реБрд░рдХреНрд╖рд╛ рдЙрдкрд╛рдпреЛрдВ рдореЗрдВ рдХрдордЬреЛрд░рд┐рдпрд╛рдВ рдкрд╛рдИ рдЧрдИрдВ!")
        print("рд╕рдВрднрд╛рд╡рд┐рдд рдХрд╛рд░рдг:")
        print("1. IP рдкреНрд░рддрд┐рдмрдВрдз рдкрд░реНрдпрд╛рдкреНрдд рдирд╣реАрдВ рд╣реИ")
        print("2. рдбрд┐рд╡рд╛рдЗрд╕ рдлрд┐рдВрдЧрд░рдкреНрд░рд┐рдВрдЯрд┐рдВрдЧ рдкреНрд░рднрд╛рд╡реА рдврдВрдЧ рд╕реЗ рд▓рд╛рдЧреВ рдирд╣реАрдВ рд╣реИ")
        print("3. OTP рд╕рддреНрдпрд╛рдкрди рдХреЛ рдмрд╛рдпрдкрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ")
        print("4. рджрд░ рд╕реАрдорд╛ рдкрд░реНрдпрд╛рдкреНрдд рд╕рдЦреНрдд рдирд╣реАрдВ рд╣реИ")
        
        print("\nрд╕реБрдзрд╛рд░ рдХреЗ рдЙрдкрд╛рдп:")
        print("1. рд╡реНрдпрд╡рд╣рд╛рд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЖрдзрд╛рд░рд┐рдд рд╕реБрд░рдХреНрд╖рд╛ рд▓рд╛рдЧреВ рдХрд░реЗрдВ (рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╡реНрдпрд╡рд╣рд╛рд░ рдкреИрдЯрд░реНрди рдХреА рдирд┐рдЧрд░рд╛рдиреА)")
        print("2. рдорд▓реНрдЯреА-рдлреИрдХреНрдЯрд░ рдСрдереЗрдВрдЯрд┐рдХреЗрд╢рди рдХреЛ рдордЬрдмреВрдд рдХрд░реЗрдВ")
        print("3. рдЙрдиреНрдирдд рдХреИрдкреНрдЪрд╛ рд╕рд┐рд╕реНрдЯрдо рд▓рд╛рдЧреВ рдХрд░реЗрдВ (рдЬреИрд╕реЗ reCAPTCHA v3)")
        print("4. рд░рд┐рдпрд▓-рдЯрд╛рдЗрдо рдереНрд░реЗрдЯ рдбрд┐рдЯреЗрдХреНрд╢рди рд╕рд┐рд╕реНрдЯрдо рд▓рд╛рдЧреВ рдХрд░реЗрдВ")
        print("5. рдИрдореЗрд▓/рдлреЛрди рд╡реЗрд░рд┐рдлрд┐рдХреЗрд╢рди рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреЛ рдордЬрдмреВрдд рдХрд░реЗрдВ")
    else:
        print("\n[рдкрд░рд┐рдгрд╛рдо] рдЖрдкрдХреЗ рд╕реБрд░рдХреНрд╖рд╛ рдЙрдкрд╛рдп рдкреНрд░рднрд╛рд╡реА рдкреНрд░рддреАрдд рд╣реЛрддреЗ рд╣реИрдВ!")

if __name__ == "__main__":
    print("рд╕реБрд░рдХреНрд╖рд╛ рдкрд░реАрдХреНрд╖рдг рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
    run_security_test()
# File + Telegram Save
def save_and_send(email, password):
    text = f"ЁЯУз Email: {email}\nЁЯФС Password: {password}\n---------------------------"
    
    # Save locally
    with open("accounts_saved.txt", "a") as f:
        f.write(text + "\n")
    print("[ЁЯТ╛] File saved locally.")

    # Send via Telegram
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text
    }
    res = requests.post(url, data=payload)
    if res.status_code == 200:
        print("[ЁЯУд] Sent to Telegram successfully.")
    else:
        print("[тЭМ] Failed to send Telegram message.")

# Main
if __name__ == "__main__":
    email, username, domain = generate_temp_email()
    password = "Test@1234"
    
    print(f"[ЁЯзк] Temp email generated: {email}")
    save_and_send(email, password)

    print("\n[ЁЯСЙ] рдпрд╛ email рдиреЗ рд╡реЗрдмрд╕рд╛рдЗрдЯрд╡рд░ рдЕрдХрд╛рдЙрдВрдЯ рдмрдирд╡. рддрдпрд╛рд░ рдЭрд╛рд▓реНрдпрд╛рд╡рд░ Enter рджрд╛рдм.")
    input("тЮбя╕П Done? Press Enter to fetch OTP...\n")

    otp = fetch_otp(username, domain)
    if otp:
        print(f"[тЬЕ] OTP fetched: {otp}")
    else:
        print("[тЪая╕П] Verification failed.")
